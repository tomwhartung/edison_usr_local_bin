#!/usr/bin/python
#
# killEmAll: kill processes matched by string
# -------------------------------------------
# Equivalent of
#   ps -aef | grep <toMatch> | xargs kill -9
# Except:
#   also works on Yocto Linux
#   asks for confirmation unless -y option is specified
#
import string
import sys
sys.path.append( '/usr/local/bin/pythonLibs' )
import tomsUlbFunctions as ulbFcns

###################
# Functions
#

##
# Displays a syntax statement
#
def syntax() :
	print( 'killEmAll [-y] stringToMatch' )
	print( '  -y: do not ask for confirmation before killing processes ' )
	print( 'Kills all processes matching stringToMatch' )

##
# Displays a syntax statement followed by an error message
#
def badSyntax() :
	syntax()
	print( 'You must specify exactly one stringToMatch' )

##
# Kill the processes in the list
#
def killTheProcesses( matchingLines ) :
	for matchingLine in matchingLines :
		## processInfo = string.split( matchingLine, '\w+' )
		processInfo = matchingLine.split()
		pid = processInfo[0]
		owner = processInfo[1]
		print( 'Killing process ' + pid + ' owned by ' + owner )
		killCommand = 'kill -9 ' + pid
		ulbFcns.myCall( killCommand )

###################
# Initialization
#
exitVal = 0

if ( len(sys.argv) < 2 ) :
	badSyntax()
	exit(1)
else :
	toMatch = sys.argv[1]

###################
#  Mainline code
#
## print( 'toMatch: "' + toMatch + '"' )
#
matchingLines = ulbFcns.getMatchingProcesses( toMatch )

if( len(matchingLines) > 0 ) :
	print( 'Killing the following processes.  Use "up" to verify processes are gone.' )
	for matchingLine in matchingLines :
		print( matchingLine )
	killTheProcesses( matchingLines )
else :
	print( 'No processes found to kill.  Use "up" to find processes.' )
	exitVal = 1

exit( exitVal )
